import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Firebase core package
import 'firebase_options.dart'; // Firebase options file (generated by Firebase setup)
import 'package:arcore_flutter_plugin/arcore_flutter_plugin.dart';
import 'package:vector_math/vector_math_64.dart' as vect;
import 'package:image_picker/image_picker.dart';

void main() async {
  // Ensure that Firebase is initialized before the app starts
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform); // Firebase initialization

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: ARViewPage(),
    );
  }
}

class ARViewPage extends StatefulWidget {
  @override
  _ARViewPageState createState() => _ARViewPageState();
}

class _ARViewPageState extends State<ARViewPage> {
  late ArCoreController arCoreController;
  late ArCoreNode modelNode;

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    arCoreController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("AR Flutter App")),
      body: ArCoreView(
        onArCoreViewCreated: _onArCoreViewCreated,
      ),
    );
  }

  // ARCore view created callback
  void _onArCoreViewCreated(ArCoreController controller) {
    arCoreController = controller;

    // Enable plane detection
    arCoreController.onPlaneDetected = (plane) {
      // Use the correct constant for horizontal planes
      if (plane.type == ArCorePlaneType.HORIZONTAL_DOWNWARD_FACING) {
        _addObjectToPlane(plane);
      }
    };
  }

  // Add object to the detected plane
  void _addObjectToPlane(ArCorePlane plane) {
 // Ensure the centerPose is not null before accessing it
    if (plane.centerPose != null) {
      final node = ArCoreReferenceNode(
        name: "3DModel",
        object3DFileName: "assets/3d_model.glb", // Corrected file name
        position: plane.centerPose!.translation,
        rotation: plane.centerPose!.rotation,
      );

      arCoreController.addArCoreNode(node);
    }
  }
}
